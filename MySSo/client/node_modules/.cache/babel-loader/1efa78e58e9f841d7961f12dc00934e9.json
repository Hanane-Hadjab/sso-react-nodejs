{"ast":null,"code":"var _jsxFileName = \"/home/addworking/Documents/Addworking/backoffice-front/src/views/Login/Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport GoogleButton from \"react-google-button\";\nimport \"../../styles/css/style.css\";\nimport { useHistory } from \"react-router\";\nimport { useDispatch } from \"react-redux\";\nimport { setAuthUser, setIsAuthenticated } from \"../../appSlice\";\nimport axios from \"axios\";\nimport { GoogleLogin } from 'react-google-login';\nimport Icon from \"../../components/GoogleLogin/Icon\";\nimport { Button } from '@material-ui/core';\nimport useStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const fetchAuthUser = async () => {\n    const response = await axios.get(process.env.REACT_APP_URL_API_LOGIN + \"/api/v1/auth/user\", {\n      withCredentials: true,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).catch(err => {\n      console.log(\"Not properly authenticated\");\n      dispatch(setIsAuthenticated(false));\n      dispatch(setAuthUser(null));\n      history.push(\"/login/error\");\n    });\n\n    if (response && response.data) {\n      console.log(\"User: \", response.data);\n      dispatch(setIsAuthenticated(true));\n      dispatch(setAuthUser(response.data));\n      history.push(\"/dashboard\");\n    }\n  };\n\n  const redirectToGoogleSSO = async () => {\n    let timer = setTimeout(null, 10);\n    const googleLoginURL = process.env.REACT_APP_URL_API_LOGIN + \"/api/v1/login\";\n    const newWindow = window.open(googleLoginURL, \"_blank\", \"width=500,height=600 \");\n\n    if (newWindow) {\n      timer = setInterval(() => {\n        if (newWindow.closed) {\n          console.log(\"Yay we're authenticated\");\n          fetchAuthUser();\n          if (timer) clearInterval(timer);\n        }\n      }, 400);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6 offset-3 mt-4\",\n        children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          clientId: \"\",\n          render: renderProps => /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.googleButton,\n            color: \"primary\",\n            fullWidth: true,\n            onClick: renderProps.onClick,\n            disabled: renderProps.disabled,\n            startIcon: /*#__PURE__*/_jsxDEV(Icon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 110\n            }, this),\n            variant: \"contained\",\n            children: \"Google Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this),\n          onSuccess: googleSuccess,\n          onFailure: googleError,\n          cookiePolicy: \"single_host_origin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"97tmSvQTXasuvULMpeN8UyNTMX0=\", false, function () {\n  return [useHistory, useStyles, useDispatch];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/addworking/Documents/Addworking/backoffice-front/src/views/Login/Login.jsx"],"names":["React","useContext","GoogleButton","useHistory","useDispatch","setAuthUser","setIsAuthenticated","axios","GoogleLogin","Icon","Button","useStyles","Login","history","classes","dispatch","fetchAuthUser","response","get","process","env","REACT_APP_URL_API_LOGIN","withCredentials","headers","catch","err","console","log","push","data","redirectToGoogleSSO","timer","setTimeout","googleLoginURL","newWindow","window","open","setInterval","closed","clearInterval","renderProps","googleButton","onClick","disabled","googleSuccess","googleError"],"mappings":"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","sourcesContent":["import React, {useContext} from \"react\";\nimport GoogleButton from \"react-google-button\";\nimport \"../../styles/css/style.css\";\nimport {useHistory} from \"react-router\";\nimport {useDispatch} from \"react-redux\";\nimport {setAuthUser, setIsAuthenticated} from \"../../appSlice\";\nimport axios from \"axios\";\nimport { GoogleLogin } from 'react-google-login';\nimport Icon from \"../../components/GoogleLogin/Icon\";\nimport { Button } from '@material-ui/core';\nimport useStyles from './styles';\n\nconst Login = () => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    const dispatch = useDispatch();\n    const fetchAuthUser = async () => {\n        const response = await axios\n            .get(process.env.REACT_APP_URL_API_LOGIN + \"/api/v1/auth/user\", {\n                withCredentials: true,\n                headers: {\"Content-Type\": \"application/json\"}\n            })\n            .catch((err) => {\n                console.log(\"Not properly authenticated\");\n                dispatch(setIsAuthenticated(false));\n                dispatch(setAuthUser(null));\n                history.push(\"/login/error\");\n            });\n\n        if (response && response.data) {\n            console.log(\"User: \", response.data);\n            dispatch(setIsAuthenticated(true));\n            dispatch(setAuthUser(response.data));\n            history.push(\"/dashboard\");\n        }\n    }\n    const redirectToGoogleSSO = async () => {\n        let timer = setTimeout(null, 10);\n        const googleLoginURL =\n            process.env.REACT_APP_URL_API_LOGIN + \"/api/v1/login\";\n        const newWindow = window.open(\n            googleLoginURL,\n            \"_blank\",\n            \"width=500,height=600 \"\n        );\n        if (newWindow) {\n            timer = setInterval(() => {\n                if (newWindow.closed) {\n                    console.log(\"Yay we're authenticated\");\n                    fetchAuthUser();\n                    if (timer) clearInterval(timer);\n                }\n            }, 400);\n        }\n    };\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col-6 offset-3 mt-4\">\n                    <GoogleLogin\n                        clientId=\"\"\n                        render={(renderProps) => (\n                            <Button className={classes.googleButton} color=\"primary\" fullWidth\n                                    onClick={renderProps.onClick} disabled={renderProps.disabled} startIcon={<Icon />}\n                                    variant=\"contained\">\n                                Google Sign In\n                            </Button>\n                        )}\n                        onSuccess={googleSuccess}\n                        onFailure={googleError}\n                        cookiePolicy=\"single_host_origin\"\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}